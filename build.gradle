plugins {
    id 'java'
    id 'com.gradleup.shadow' version '8.3.1'
    id 'xyz.jpenilla.run-paper' version '2.3.1'
}

group = 'it.dominick'
description = 'RegionX'
version = '1.0'

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven { url = 'https://repo.triumphteam.dev/snapshots/' }
    maven { url = 'https://repo.codemc.io/repository/maven-releases/' }
    maven { url = 'https://jitpack.io' }
}

dependencies {
    compileOnly "org.spigotmc:spigot-api:1.17-R0.1-SNAPSHOT"

    implementation 'com.github.retrooper:packetevents-spigot:2.6.0'
    implementation 'org.reflections:reflections:0.10.2'
    implementation "dev.triumphteam:triumph-cmd-bukkit:2.0.0-BETA-4"
    implementation "dev.triumphteam:triumph-gui:3.2.0-SNAPSHOT"
    implementation 'com.github.CryptoMorin:XSeries:v13.4.0'

    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

shadowJar {
    minimize()
    archiveFileName = "${project.description}-${project.version}.jar"
}

tasks.build.finalizedBy tasks.runServer

tasks.named('runServer') {
    minecraftVersion '1.17.1'
    runDirectory.set(layout.projectDirectory.dir('run'))

    javaLauncher = javaToolchains.launcherFor {
        vendor = JvmVendorSpec.JETBRAINS
        languageVersion = JavaLanguageVersion.of(17)
    }
    jvmArgs(
            '-Xmx2G',
            '-XX:+UseG1GC',
            '-XX:+AllowEnhancedClassRedefinition',
            '-Dnet.kyori.adventure.text.warnWhenLegacyFormattingDetected=false'
    )
}